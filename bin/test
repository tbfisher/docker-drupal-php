#!/bin/bash

# exit on error, unset vars
set -eu
# exit early for errors in pipelines
set -o pipefail

usage() {
    cat << EOF
usage: $0 [options]

OPTIONS:
    -v        Verbose output, prints every command to stdout.
    -h        Prints this help message.
EOF
}

sleep=2

# Options
while getopts ":nd:vh" opt; do
    case $opt in
        v)
            set -x
            ;;
        h)
            usage
            exit
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            usage
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
    esac
done

# http get `<?php phpinfo()`
http_test_200() {
    set +e
    result="$(curl -SsIL "$1")"
    code=$(echo "$result" | grep '^HTTP/' | awk '{ print $2 }')
    set -e
    if [[ $code == '200' ]]; then
        echo http request ok.
    elif [[ "$result" ]]; then
        echo "http request to $1 failed!!!!!!!!!!!"
        echo "$result"
    else
        echo http request unknown error.
    fi
}

# test enabling xdebug
xdebug_test_enable() {
    set +e
    if docker-compose exec phpdev /bin/bash -c "sed -i 's/^;//' /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini; php -r 'xdebug_var_dump();'" > /dev/null 2>&1
    then
        echo 'xdebug enable ok.'
    else
        echo 'enable xdebug enable failed!!!!!!!!!!!!'
    fi
    set -e
}

docker-compose up -d --build
sleep "$sleep"
echo testing dev:
http_test_200 http://localhost:8080/
xdebug_test_enable
echo testing stage:
http_test_200 http://localhost:8081/
docker-compose down
